realDirection[i]=-1
}
else if (realDirection[i]>=0.01){
realDirection[i]=1
}
if(realDirection[i]>0&&forecastDirection[i]>0) correctCount_rise=correctCount_rise+1
if(realDirection[i]<0&&forecastDirection[i]<0) correctCount_fall=correctCount_fall+1
}
correctCount=correctCount_fall+correctCount_rise
totalCount=totalCount_fall+totalCount_rise
print(correctCount_rise/totalCount_rise)
print(correctCount_fall/totalCount_fall)
print(correctCount/totalCount)
plot(1:101,realDirection,type='l')
par(new=TRUE)
plot(1:101,forecastDirection,col='red')
library(Rcpp)
library(forecast)
source('~/Desktop/R_Analysis_Framework/HawkesProcessModel/MultivariateHawkesModel.R')
source('~/Desktop/R_Analysis_Framework/TimeSeries/TimeSeriesUtility.R')
####1. Simulate a sample path####
mu<-array(c(0.25,0.25),dim=c(2,1));
alpha<-array(c(0.08,0.12,0.12,0.03),dim=c(2,2));
beta<-array(c(1,1,1,1),dim=c(2,2));
mu_0<-array(c(0.5,0.5),dim=c(2,1));
alpha_0<-array(c(0.5,0.5,0.5,0.5),dim=c(2,2));
theta<-c(mu_0,alpha_0);
xTraining<-BivariateHawkesSimulation_bynumber(3000,mu,alpha,beta);
xTrainingResult<-list(xTraining[[1]],list(xTraining[[2]],xTraining[[3]]))
xTesting<- BivariateHawkesSimulation_bynumber(2000,mu,alpha,beta,
history=xTraining)
xTestingResult<-list(xTesting[[1]],list(xTesting[[2]],xTesting[[3]]))
trainingSet=BivariateHawkesPriceSimulation(xTrainingResult,100)
regTrainingSet=TimeSeriesRegularization_C(trainingSet)
#trainingSetEnd: last time value in seconds of training set, = last index-1
trainingSetEnd=regTrainingSet[dim(regTrainingSet)[1]]
steps=200
HawkesPrediction=array(0,dim=c(trainingSetEnd+steps*3+1,2))
HawkesPrediction[,1]=0:(trainingSetEnd+steps*3)
HawkesPrediction[1:(trainingSetEnd+1),2]=regTrainingSet[,2]
#predictionIndex: the index of the first prediction value
predictionIndex0=trainingSetEnd+2
predictionIndex=trainingSetEnd+2
testingSet=BivariateHawkesPriceSimulation(xTestingResult,100)
regTestingSet=TimeSeriesRegularization_C(testingSet)
testingSetEnd=regTestingSet[dim(regTestingSet)[1]]
####2. Use training set to learn parameters####
par<-constrOptim.nl(par=theta,fn=BivariateHawkesLikelihood_Beta_Fixed_bynumber_C,gr=BivariateHawkesGradient_Beta_Fixed_bynumber_C,
hin=BivariateHawkesLikelihood_Beta_Fixed_MLEhin_bynumber_C,
control.outer=list(trace=FALSE),control.optim=list(trace=FALSE,fnscale=-0.01),
points=xTrainingResult);
####3. Monte Carlo simulation (3 seconds/10 points ahead) ####
MCResult=Price_MCSimulation_BivariateHawkes(20,mu,alpha,beta,10,100,history=xTraining)
HawkesPrediction[predictionIndex:(predictionIndex+2),2]=MCResult[[2]][predictionIndex:(predictionIndex+2)]
# plot(HawkesPrediction[predictionIndex:(predictionIndex+2),],type='p',col='blue',xlim=c((predictionIndex-1),(predictionIndex+2)),ylim=c(101.2,101.4),xlab='',ylab='')
# par(new=TRUE)
# plot(regTestingSet[predictionIndex:(predictionIndex+2),],type='s',col='red',xlim=c((predictionIndex-1),(predictionIndex+2)),ylim=c(101.2,101.4),xlab='',ylab='')
####4. Extend the training set to include the new data and repeat previous simulation ####
for(i in 1:steps){
trainingSetEnd=trainingSetEnd+3 # This is time
predictionIndex=trainingSetEnd+2 # This is index
xTraining1=list()
xTraining1[[1]]<-xTesting[[1]][xTesting[[1]]<=trainingSetEnd];
xTraining1[[2]]<-xTesting[[2]][xTesting[[2]]<=trainingSetEnd];
xTraining1[[3]]<-xTesting[[3]][xTesting[[3]]<=trainingSetEnd];
xTrainingResult1<-list(xTraining1[[1]],list(xTraining1[[2]],xTraining1[[3]]))
trainingSet1=BivariateHawkesPriceSimulation(xTrainingResult1,100)
regTrainingSet1=TimeSeriesRegularization_C(trainingSet1,trainingSetEnd)
MCResult1=Price_MCSimulation_BivariateHawkes(20,mu,alpha,beta,10,100,history=xTraining1)
HawkesPrediction[predictionIndex:(predictionIndex+2),2]=MCResult1[[2]][predictionIndex:(predictionIndex+2)]
}
####Derive the Hawkes results####
forecastTable=array(0,dim=c((steps+2),3))
forecastTable[1,1:2]=regTestingSet[predictionIndex0-1,1:2]
forecastTable[1,3]=regTestingSet[predictionIndex0-1,2]
for (i in 2:(steps+2)){
forecastTable[i,1:2]=regTestingSet[(predictionIndex0-1+3*(i-1)),1:2]
forecastTable[i,3]=HawkesPrediction[(predictionIndex0-1+3*(i-1)),2]
}
# plot(forecastTable[,1],forecastTable[,2],col='blue',type='p')
# par(new=TRUE)
# plot(forecastTable[,1],forecastTable[,3],col='red',type='p')
forecastDirection=forecastTable[2:(steps+2),3]-forecastTable[1:(steps+1),2]
realDirection=forecastTable[2:(steps+2),2]-forecastTable[1:(steps+1),2]
correctCount_rise=0
correctCount_fall=0
correctCount=0
totalCount_rise=0
totalCount_fall=0
totalCount=0
for (i in 1:(steps+1)){
if(forecastDirection[i]<=-0.005){
forecastDirection[i]=-1
totalCount_fall=totalCount_fall+1
}
else if (forecastDirection[i]>=0.005){
forecastDirection[i]=1
totalCount_rise=totalCount_rise+1
}
else{
forecastDirection[i]=0
}
if(realDirection[i]<=-0.01){
realDirection[i]=-1
}
else if (realDirection[i]>=0.01){
realDirection[i]=1
}
if(realDirection[i]>0&&forecastDirection[i]>0) correctCount_rise=correctCount_rise+1
if(realDirection[i]<0&&forecastDirection[i]<0) correctCount_fall=correctCount_fall+1
}
correctCount=correctCount_fall+correctCount_rise
totalCount=totalCount_fall+totalCount_rise
print(correctCount_rise/totalCount_rise)
print(correctCount_fall/totalCount_fall)
print(correctCount/totalCount)
plot(1:(steps+1),realDirection,type='l')
par(new=TRUE)
plot(1:(steps+1),forecastDirection,col='red')
#Read in data and extract the time range
data<-read.table('goog_2010_dec.csv',header=TRUE,sep=',')
test<-as.POSIXct(as.character(data$DATE),format="%Y%m%d")
data$TIME<-as.POSIXct(paste(test,data$TIME))
data$DATE<-NULL
idx<-tapply(1:NROW(data),data$TIME,"[",1)
data_red<-data[idx,c(2:3)]
day_01_idx<-(data_red$TIME>=as.POSIXct("2010-12-01 10:30:00",format="%Y-%m-%d %H:%M:%S"))&(data_red$TIME<=as.POSIXct("2010-12-01 11:30:00",format="%Y-%m-%d %H:%M:%S"))
day_01<-data_red[t(day_01_idx),]
plot(day_01[,2]~day_01[,1],type='s',xlab='time',ylab='Price')
setwd("~/Dropbox/Vschon/R_Analysis_Framework/HawkesProcessModel")
#Read in data and extract the time range
data<-read.table('goog_2010_dec.csv',header=TRUE,sep=',')
test<-as.POSIXct(as.character(data$DATE),format="%Y%m%d")
data$TIME<-as.POSIXct(paste(test,data$TIME))
data$DATE<-NULL
idx<-tapply(1:NROW(data),data$TIME,"[",1)
data_red<-data[idx,c(2:3)]
day_01_idx<-(data_red$TIME>=as.POSIXct("2010-12-01 10:30:00",format="%Y-%m-%d %H:%M:%S"))&(data_red$TIME<=as.POSIXct("2010-12-01 11:30:00",format="%Y-%m-%d %H:%M:%S"))
day_01<-data_red[t(day_01_idx),]
plot(day_01[,2]~day_01[,1],type='s',xlab='time',ylab='Price')
day_01
data_red<-data[idx,c(2:3)]
day_01_idx<-(data_red$TIME>=as.POSIXct("2010-12-01 10:30:00",format="%Y-%m-%d %H:%M:%S"))&(data_red$TIME<=as.POSIXct("2010-12-01 11:00:00",format="%Y-%m-%d %H:%M:%S"))
day_01<-data_red[t(day_01_idx),]
plot(day_01[,2]~day_01[,1],type='s',xlab='time',ylab='Price')
dim(day_01)
idx<-tapply(1:NROW(data),data$TIME,"[",1)
data_red<-data[idx,c(2:3)]
day_01_idx<-(data_red$TIME>=as.POSIXct("2010-12-01 11:00:00",format="%Y-%m-%d %H:%M:%S"))&(data_red$TIME<=as.POSIXct("2010-12-01 11:30:00",format="%Y-%m-%d %H:%M:%S"))
day_01<-data_red[t(day_01_idx),]
plot(day_01[,2]~day_01[,1],type='s',xlab='time',ylab='Price')
dim(day_01)
day_01
dim(day_01)
day_01[,1]
day_01[,2]
day_01
day_01_idx
day_01
data$DATE<-NULL
idx<-tapply(1:NROW(data),data$TIME,"[",1)
data_red<-data[idx,c(2:3)]
day_01_idx<-(data_red$TIME>=as.POSIXct("2010-12-01 10:30:00",format="%Y-%m-%d %H:%M:%S"))&(data_red$TIME<=as.POSIXct("2010-12-01 11:30:00",format="%Y-%m-%d %H:%M:%S"))
day_01<-data_red[t(day_01_idx),]
plot(day_01[,2]~day_01[,1],type='s',xlab='time',ylab='Price')
length(day_01)
dim(day_01)
#transform time type to double
n=dim(day_01)[1]
goog_data=array(0,dim=c(n,2))
goog_data[,1]=as.double(day_01[,1])
goog_data[,2]=as.double(day_01[,2])
goog_data[,1]=goog_data[,1]-goog_data[1,1]
T=3600
goog_trainingset=goog_data[goog_data[,1]<=T/2,]
goog_testingset=goog_data[goog_data[,1]>T/2]
goog_trainingset
plot(goog_trainingset,type='s')
acf(goog_trainingset[,2])
pacf(goog_trainingset[,2])
reg_goog=TimeSeriesRegularization_C(goog_trainingset)
source('~/Dropbox/Vschon/R_Analysis_Framework/TimeSeries/TimeSeriesUtility.R')
reg_goog=TimeSeriesRegularization_C(goog_trainingset)
plot(reg_goog)
plot(reg_goog,type='s')
reg_goog
acf(reg_goog)
acf(reg_goog[,2])
pacf(reg_goog[,2])
dgoog=diff(reg_goog)
dgoog
plot(dgoog)
dgoog=diff(reg_goog[,2])
plot(dgoog)
summary(dgoog)
acf(dgoog)
pacf(dgoog)
acf(dgoog)
fit=auto.arima(dgoog)
library("forecast", lib.loc="/home/t3500/R/x86_64-pc-linux-gnu-library/3.0")
fit=auto.arima(dgoog)
fit
forecsat(dgoog)
forecsat(fit,h=5)
forecast(fit,h=5)
fit=auto.arima(reg_goog[,2])
fit
forecast(fit,h=5)
plot(forecast(fit,h=20))
plot(forecast(fit,h=100))
res=fit$residuals
plot(res)
tsdiag(res)
res
class(res)
res=array(res)
res
tsdiag(res)
class(res)
res
tsdiag(fit)
fit
fit=auto.arima(reg_goog[,2],allowdrift=FALSE)
fit
tsdiag(fit)
forecast(fit,h=5)
plot(forecast(fit,h=5))
fit
fit=auto.arima(dgoog,allowdrift=FALSE)
fit
forecast(fit,h=5)
plot(forecast(fit,h=5))
plot(forecast(fit,h=100))
str(fit)
f=forecast(fit,h=10)
f
str(f)
f
dgoog
day_01
ttt=diff(day_01[,2])
ttt
hist(ttt)
?bin
?hist
hist(ttt)
ttt
t0=ttt[ttt==0]
t0
length(t0)
t1=ttt[ttt>0&&ttt<0.01]
t1
t1=ttt[ttt>0&&ttt<0.02]
t1
t1=ttt[ttt>0&&ttt<0.1]
t1
t1=ttt[ttt>0 && ttt<0.1]
t1
t1=ttt[ttt<0.1]
ttt
t1=ttt[ttt>0&&ttt<1]
t1
t1=ttt[(ttt>0&&ttt<1)]
t1
t1=ttt[(ttt>0&ttt<1)]
t1
t1=ttt[(ttt>0&ttt<0.01)]
t1
day_01
length(day_01)
length(day_01[,2])
head(data)
data[1000:5000,]
library(alabama)
#Read in data and extract the time range
data<-read.table('goog_2010_dec.csv',header=TRUE,sep=',')
data
data<-read.table('goog_2010_dec.csv',header=TRUE,sep=';')
data
head(data)
data$TIME
data[1000:5000,]
str(data)
data.PRICE
data$PRICE
price=data$PRICE
price
diff(price)
dprice=diff(price)
hist(dprice)
?hist
hist(dprice,breaks=10)
hist(dprice,breaks=20)
hist(dprice,breaks=30)
?hist
hist(dprice,breaks=seq(from=-0.1,to=0.1,by=0.01))
seq(from=-0.1,to=0.1,by=0.01)
max(dprice)
data
data=data[data$DATE=20101201]
str(data)
data[data$DATE='20101201']
data[data$DATE=='20101201']
data[data$DATE==20101201]
data$DATE==20101201
data$PRICE[data$DATE==20101201]
dim(data)
price=data$PRICE[data$DATE==20101201]
dim(price)
length(price)
dprice=diff(price)
dpric
dprice
hist(dprice)
max(dprice)
dprice
head(dprice)
argmax(dprice)
nanargmax(dprice)
which.max(dprice)
dprice[1000:2000]
plot(dprice)
plot(dprice)
dprice=dprice[10000:15000]
max(dprice)
min(dprice)
plot(dprice)
hist(dprice,breaks=seq(from=-2,to=2,by=0.1))
hist(dprice,breaks=seq(from=-2,to=2,by=0.01))
?hist
hist(dprice,breaks=seq(from=-2,to=2,by=0.01),freq=FALSE)
str(hist)
a=hist(dprice,breaks=seq(from=-2,to=2,by=0.01),freq=FALSE)
str(a)
a
str(a)
a$density[201]
a$density[20]
a$density[1]
a$density[3]
a$density[4]
a$density[5]
a$density[200]
a$breaks[200]
a$breaks[201]
a$breaks[202]
a$breaks
?hist
a=hist(dprice,breaks=seq(from=-2,to=2,by=0.1),freq=FALSE)
dpricer
dprice
table(dprice)
a=table(dprice)
a
str(a)
sum(dprice==0)
length(dprice)
length(dprice==-0.01)
sum(dprice==-0.01)
sum(dprice==0.01)
sum(dprice>=-0.01&dprice<0)
sum(dprice>=-0.1&dprice<0)
sum(dprice>=-0.01&dprice<0)
sum(dprice==-0.01)
dprice
sum((dprice>=-0.01)&&(dprice<0))
sum((dprice>=-0.01)&(dprice<0))
(dprice>=-0.01)&(dprice<0)
(dprice>=-0.01)&&(dprice<0)
sum((dprice>=-0.01)&(dprice<0))
sum((dprice>=-0.01)&(dprice<0))
sum((dprice==-0.01))
which(dprice==0.01)
dprice==0.01
dprice==0.01
dprice
dprice[4838]
sum(dprice==-0.01)
dprice[4838]==-0.01
sprintf(dprice[4838])
?sprintf
sprintf("%.6f",dprice[4838])
dprice[4838]+0.01
dprice[4838]==0.01
sprintf("%.20f",dprice[4838])
price
plot(dprice)
length(dprice)
sum(dprice>=-0.01&dprice<0)
sum(dprice==0)
sum(dprice>=-0.00005&dprice<0.00005)
1522/5001
351/5001
sum(dprice<=0.01&dprice<0)
sum(dprice<=0.01&dprice>0)
425/50014
sum(dprice<=0.1&dprice>0)
a=hist(dprice,breaks=seq(from=-2,to=2,by=0.1),freq=FALSE)
a=hist(dprice,breaks=seq(from=-2.05,to=2.05,by=0.1),freq=FALSE)
a=hist(dprice,breaks=seq(from=-2.05,to=2.05,by=0.01),freq=FALSE)
1368/5001
a=hist(dprice,breaks=seq(from=-2.005,to=2.005,by=0.01),freq=FALSE)
sum(dprice<=0.1&dprice>=-0.1)
4153/5001
sum(dprice==0)
1522/5001
reg_goog
dgoog
sum(dprice==0)
length(dprice)
sum(dgoog==0)
length(dgoog)
1131/1800
dgoog
hist(dgoog)
a=hist(dgoog,breaks=seq(from=-2.005,to=2.005,by=0.01),freq=FALSE)
source('~/.active-rstudio-document')
negativeRush=0
positiveRush=0
positive_fall=0
positive_rise=0
positive_flat=0
neagtive_fall=0
neagtive_rise=0
neagtive_flat=0
for (i in 3:length(dgoog)){
if(dgoog[i-2]<0&&dgoog[i-1]<0){
negativeRush=0
if(dgoog[i]>0) negative_rise=negative_rise+1
if(dggog[i]=0) negative_flat=negative_flat+1
if(dgoog[i]<0) negative_fall=negative_fall+1
}
if(dgoog[i-2]>0&&dgoog[i-1]>0){
positiveRush=0
if(dgoog[i]>0) positive_rise=negative_rise+1
if(dgoog[i]=0) positive_flat=negative_flat+1
if(dgoog[i]<0) positive_fall=negative_fall+1
}
}
print(negative_rise/negativeRush)
print(negative_flat/negativeRush)
print(positive_fall/positiveRush)
print(positive_flat/positiveRush)
source('~/.active-rstudio-document')
negativeRush=0
positiveRush=0
positive_fall=0
positive_rise=0
positive_flat=0
neagtive_fall=0
neagtive_rise=0
neagtive_flat=0
for (i in 3:length(dgoog)){
if(dgoog[i-2]<0&&dgoog[i-1]<0){
negativeRush=negativeRush+1
if(dgoog[i]>0) negative_rise=negative_rise+1
if(dggog[i]==0) negative_flat=negative_flat+1
if(dgoog[i]<0) negative_fall=negative_fall+1
}
if(dgoog[i-2]>0&&dgoog[i-1]>0){
positiveRush=positiveRush+1
if(dgoog[i]>0) positive_rise=positive_rise+1
if(dgoog[i]==0) positive_flat=positive_flat+1
if(dgoog[i]<0) positive_fall=positive_fall+1
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sum(dgoog>0)
sum(dgoog>0)/length(dgoog)
dprice
source('~/.active-rstudio-document')
sum(dprice>0)/length(dprice)
sum(dprice<0)/length(dprice)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
negativeRush
negative_rise
positive_fall
positiveRush
source('~/.active-rstudio-document')
plot(price)
plot(price,type='s')
plot(goog_data)
plot(goog_data,type='s')
dgoog
length(dgoog)
sum(dgoog>0)
sum(dgoog<0)
sum(dgoog=0)
sum(dgoog==0)
dim(goog_data)
goog_data
head(goog_data)
reg_goog
dgoog
length(dgoog)
goog_data
reg_goog
sum(reg_goog>0)
reg_goog
sum(reg_goog>0)
dim(reg_goog)
reg_goog
dgoog
sum(dgoog>0)
sum(dgoog<0)
sum(dgoog=0)
sum(dgoog==0)
